//BFS traversal
import java.util.*;
public class Hello {

    private static void bfs(byte[][] adjMat, int source, int N) {
        Queue<Integer> queue = new LinkedList<Integer>();
        boolean visited[] = new boolean[N+1];
        queue.add(source);
        visited[source]=true;
        while(!queue.isEmpty()) {
            int s=queue.poll();
            System.out.print(s+" ");
            for(int v=1;v<=N;v++) {
                if (v != s && adjMat[s][v]==1 && visited[v]==false) {
                    queue.add(v);
                    visited[v]=true;
                }
            }
        }
    }
    public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int N=sc.nextInt(), source=sc.nextInt();
		byte adjMat[][]=new byte[N+1][N+1];
		for(int row=1;row<=N;row++) {
		    for(int col=1;col<=N;col++) {
		        adjMat[row][col]=sc.nextByte();
		    }
		}
		bfs(adjMat,source,N);

	}
}

//DFS traversal
import java.util.*;
public class Hello {

    private static void dfs(int s, int N, byte[][] adjMat, boolean visited[]) {
        System.out.print(s+" ");
        for(int v=1;v<=N;v++) {
            if (v!=s && adjMat[s][v]==1 && visited[v]==false) {
                visited[v]=true;
                dfs(v, N, adjMat, visited);
            }
        }
    }
    public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int N = sc.nextInt(), source = sc.nextInt();
		boolean visited[] = new boolean[N+1];
		byte[][] adjMat = new byte[N+1][N+1];
		for(int row=1;row<=N;row++) {
		    for(int col=1;col<=N;col++) {
		        adjMat[row][col] = sc.nextByte();
		    }
		}
		visited[source]=true;
		dfs(source, N, adjMat, visited);
	}
}

/*
A list of pairs of cities (source and destination) connected by one-way road is given as the input. The program must find if all the cities are reachable from the city S.
There are R roads and N cities numbered from 1 to N. Note: Each city has exactly one incoming and one outgoing road.
*/
import java.util.*;
public class Hello {

    private static void bfs(int s, int N , byte[][] adjMat) {
        Queue<Integer> queue = new LinkedList<>();
        boolean visited[] = new boolean[N+1];
        int visitedCount=1;
        queue.add(s);
        visited[s]=true;
        while(!queue.isEmpty()) {
            s=queue.poll();
            for(int v=1;v<=N;v++) {
                if (v != s && adjMat[s][v]==1) {
                    if (visited[v]==true) {
                        break;
                    }
                    else {
                        queue.add(v);
                        visited[v]=true;
                        visitedCount++;
                    }
                }
            }
        }
        if (visitedCount == N) {
            System.out.print("yes");
        }
        else {
            System.out.print("no");
        }
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt(), R = sc.nextInt(), S = sc.nextInt();
        byte adjMat[][] = new byte[N+1][N+1];
        for(int ctr=1;ctr<=R;ctr++) {
            int x=sc.nextInt(), y=sc.nextInt();
            adjMat[x][y]=1;
        }
        bfs(S, N, adjMat);

	}
}
/*
Let's say you have an integer array and a string array. You have to write a single method printArray that can print all the elements of both arrays. The method should be able to 
accept both integer arrays or string arrays.
Do not use method overloading because your answer will not be accepted.
*/
import java.io.IOException;
import java.lang.reflect.Method;

class Printer<T>
{
   //Write your code here
   void printArray(T arr[]) {
       for(int i=0;i<arr.length;i++) {
           System.out.println(arr[i]);
       }
   }
 
}

public class Solution {


    public static void main( String args[] ) {
        Printer myPrinter = new Printer();
        Integer[] intArray = { 1, 2, 3 };
        String[] stringArray = {"Hello", "World"};
        myPrinter.printArray(intArray);
        myPrinter.printArray(stringArray);
        int count = 0;

        for (Method method : Printer.class.getDeclaredMethods()) {
            String name = method.getName();

            if(name.equals("printArray"))
                count++;
        }

        if(count > 1)System.out.println("Method overloading is not allowed!");
      
    }
}
/*
Given an array of n Player objects, write a comparator that sorts them in order of decreasing score; if 2 or more players have the same score, sort those players 
alphabetically by name
*/
import java.util.*;

// Write your Checker class here
class Checker implements Comparator<Player> {
    @Override
    public int compare(Player p1, Player p2) {
        if (p1.score==p2.score)
            return p1.name.compareTo(p2.name);
        return p2.score-p1.score;
    }
}
class Player{
    String name;
    int score;
    
    Player(String name, int score){
        this.name = name;
        this.score = score;
    }
}

class Solution {

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int n = scan.nextInt();

        Player[] player = new Player[n];
        Checker checker = new Checker();
        
        for(int i = 0; i < n; i++){
            player[i] = new Player(scan.next(), scan.nextInt());
        }
        scan.close();
     
        Arrays.sort(player, checker);
        for(int i = 0; i < player.length; i++){
            System.out.printf("%s %s\n", player[i].name, player[i].score);
        }
    }
}